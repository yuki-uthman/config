{
 :profiles {
     :goku {
         :default true

         :sim     50    ;; simultaneous_threshold_milliseconds (def: 50)
                         ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
         :delay   1    ;; to_delayed_action_delay_milliseconds (def: 500)
                        ;; after :delay ms, the key press is considered to be delayed (TODO WHAT IS THIS??)
         :alone   200   ;; to_if_alone_timeout_milliseconds (def: 1000)
                         ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
         :held    500   ;; to_if_held_down_threshold_milliseconds (def: 500)
                        ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command) (TODO WHAT IS THIS??)
              }
 } ;; profiles

 :applications  {;; define applications
                 :firefox [;; these strings are regex to match applications bundle_identifiers
                            ;; you can find bundle_identifiers in the Info.plist file of an applications
                            ;; eg. in /Applications/Mail.app/Contents/Info.plist
                            ;; search for "CFBundleIdentifier"
                            ;; you can also find bundle_identifiers using command line:
                            ;; osascript -e 'id of app "Google Chrome"'
                            "^org\\.mozilla\\.firefox$"
                            ]
                 :alfred ["^com\\.runningwithcrayons\\.Alfred$"]
                 :terminal ["^com\\.googlecode\\.iterm2$"]
                 }

 :layers    {
             :tab-layer {:key :tab}
             :dot-layer {:key :period}
             :comma-layer {:key :comma}
             :v-layer {:key :v}
             :x-layer {:key :x}
             :z-layer {:key :z}
             }

 :simlayers {
             :a-mode {:key :a}
             :f-mode {:key :f}
             :j-mode {:key :j}
             :m-mode {:key :m}
             :o-mode {:key :o}
             :p-mode {:key :p}
             :q-mode {:key :q}
             :s-mode {:key :s}
             :v-mode {:key :v}
             :w-mode {:key :w}
             :z-mode {:key :z}
            }

 :main [

        ; {:des   "global C-h to backspace"
        ;  :rules [[:!Th :delete_or_backspace nil {:params {:alone 500 :held 500}}]]
        ;  }

        ;; right hand modifier
        {:des "enter to ctrl as modifier"
         :rules [[:##return_or_enter :right_control nil {:alone :return_or_enter}]]
        }

        {:des "quote to ctrl as modifier"
         :rules [[:##quote :right_control nil {:alone :quote}]]
        }

        {:des "slash to shift"
         :rules [[:##slash :right_shift nil {:alone :slash}]]
        }

        ; RK keyboard left ctrl and caps lock got switched
        {:des "left ctrl to esc if pressed alone"
         :rules [[:##left_control :left_control nil {:alone :escape}]]
        }

        {:des "tab to option as modifier"
         :rules [[:##tab :left_option nil {:alone :tab}]]
        }

        {:des "launcher mode"
        :rules [:o-mode

                ;; Alfred
                [:a :!Qspacebar]

                ;; Firefox
                [:f "osascript -e 'tell application \"Firefox\" to activate'" ]
                [:g "open -a /Applications/Firefox.app \"https://google.com\""]
                [:y "open -a /Applications/Firefox.app \"https://youtube.com\""]
                [:s "open -a /Applications/Firefox.app \"https://studio.youtube.com\""]

                [:t "osascript -e 'tell application \"iTerm\" to activate'" ]


               ]}

        {:des "pane mode"
        :rules [:z-layer

                ;; for zettel keybinding
                [:o [:z :o]]
                [:n [:z :n]]

                [:h :!Oh]
                [:j :!Oj]
                [:k :!Ok]
                [:l :!Ol]

                [:spacebar :!Tspacebar]

                [:semicolon [:!Tsemicolon]]

               ]}

        {:des "tmux mode"
        :rules [:x-layer

                ;; change session with j & k
                [:j [:!Ts :n]]
                [:k [:!Ts :p]]

                ;; change window with h & l
                [:l :!On :terminal]
                [:h :!Op :terminal]

                ;; alternative window
                [:semicolon [:!Osemicolon]]

                ;; next pane
                [:i [:!Ts :o]]
                ;; previous pane
                [:o [:!Ts :i]]

                ;; pane
                ;;[:y :!Oh]
                ;;[:u :!Oj]
                ;;[:i :!Ok]
                ;;[:o :!Ol]

                ;; split
                [:backslash [:!Ts :!Tv] :terminal]
                [:hyphen [:!Ts :!Tn] :terminal]

                ;; close pane
                [:c :!Oc :terminal]

                ;; kill session
                [:z :!Ox :terminal]

                ;; reload tmux
                [:r :!Or :terminal]


                ;; firefox next/previous tab
                [:h :!CSopen_bracket :firefox]
                [:l :!CSclose_bracket :firefox]


               ]
        }


        {:des "numbers mode"
        :rules [:z-layer
                ; [:u :1]
                ; [:i :2]
                ; [:o :3]
                ; [:j :4]
                ; [:k :5]
                ; [:l :6]
                ; [:n :7]
                ; [:m :8]
                ; [:comma :9]

                ; [:h :delete_or_backspace]
              ]
        }

        {:des "motion mode"
        :rules [:f-mode

                ;; vim motion
                [:h :!S6]
                [:l :!S4]

                [:k :!Sopen_bracket]
                [:j :!Sclose_bracket]

               ]
        }

        {:des "symbol mode"
        :rules [:comma-layer

                ;; {}
                [:w :!Sopen_bracket]
                [:e :!Sclose_bracket]

                ;; ()
                [:q :!S9]
                [:r :!S0]

                ;; =
                [:f :equal_sign]

                ;; +
                [:d :!Sequal_sign]

                ;; -
                [:s :hyphen]

                ;; _
                [:a :!Shyphen]

                ;; >
                ;;[:period :!Speriod]

                ;; <
                ;;[:comma :!Scomma]

               ]
        }

        {:des "Firefox"
         :rules [

                 [:!Tj :down_arrow :firefox]
                 [:!Tk :up_arrow :firefox]

                 [:!Tl :return_or_enter :firefox]

                 ]}

        {:des "swap : and ;"
         :rules [[:#Psemicolon :!Ssemicolon]
                 [:!Ssemicolon :semicolon]]}


        {:des "j and k and enter keys"
         :rules [

                 [:!Tj :!Tn :!terminal]
                 [:!Tk :!Tp :!terminal]
                 [:!Tm :return_or_enter :!terminal]

                 ]}

        {:des "delete words with c-w"
         :rules [
                 [:!Tw :!Odelete_or_backspace :!terminal]

                 ]


         }

        {:des "mac mode"
         :rules [:q-mode

                  ;; change desktop
                  [:l :!Cright_arrow]
                  [:h :!Cleft_arrow]

                  ;; change application
                  [:j :!Ctab]
                  [:k :!!tab]

                 ]

         }


        {:des "move faster in the non-vim application"
        :rules [:tab-layer

                ;; move by word in terminal
                [:l :!Tright_arrow :terminal]
                [:h :!Tleft_arrow :terminal]

                ;; move by word in non-terminal
                [:l :!Oright_arrow :!terminal]
                [:h :!Oleft_arrow :!terminal]

                ;; delete by word
                [:w :!Odelete_or_backspace :!terminal]
                [:w :!Odelete_or_backspace :terminal]

               ]
        }

        {:des   "numbers lock"
         :rules [
                 [[:n :l] ["numbers-lock" 1] :!numbers-lock]

                 :numbers-lock
                 [[:n :l] ["numbers-lock" 0]]

                 [:u :1]
                 [:i :2]
                 [:o :3]
                 [:j :4]
                 [:k :5]
                 [:l :6]
                 [:m :7]
                 [:comma :8]
                 [:period :9]

                 ;; =
                 [:f :equal_sign]

                 ;; +
                 [:d :!Sequal_sign]

                 ;; -
                 [:s :hyphen]

                 ]
         }


       ] ;; main
}
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; !! | command + control + optional + shift (hyper)

;; to understand better how modifiers work in karabiner
;; karabiner definition of mandatory and optional
;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/

;; !  | mandatory
;;                  modifier *has* to be present for event to occur
;;                  modifier is removed in output (to event)
;; #  | optional (single)
;;                  one of the optional modifiers has to exist but not all
;;                  only this modifier has to exist, combining with another won't work
;;                  modifier is kept in output (to event)
;; ## | optional any
;;                  what you would expect, everything is tacked on

;; need to prefix C T O S F with ! or #
;;
;; code for all this:
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/b9b334a187379f9bc8182ad59e2cca2a1789e9c0/src/karabiner_configurator/keys.clj#L68

