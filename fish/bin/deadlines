#!/usr/bin/env ruby
require "time"

class Date
  def self.day_hour_min(sec)
    day, h = sec.divmod(24 * 60 * 60)
    h,   min = h.divmod(60 * 60)
    min, = min.divmod(60)
    [day, h, min.to_i]
  end
end

filename = "#{Dir.home}/.zettel/deadlines.txt"
deadlines = {}
File.read(filename).split(/\n/).map do |row|
  if row.empty?
    next
  end

  date, name = row.split(" ; ")
  date = Time.strptime(date, "%d/%m/%Y %H:%M")
  deadlines[name.to_s] = date
end

deadlines.transform_values! do |deadline|
  time_left = deadline - Time.now
  Date.day_hour_min(time_left)
end

# gets the deadlines within 7 days without any args
days_left = ARGV.empty? ? 7 : Integer(ARGV[0])

deadlines.select! {|_, time_left| time_left[0] >= 0 && time_left[0] <= days_left }

system("clear")

deadlines.sort_by {|_, time_left| time_left[0] }.each do |name, time_left|
  puts name.to_s
  days = time_left[0]
  if days.zero?
    hours = time_left[1]
    puts "  #{hours} hours left!"
  else
    puts "  #{days} days left"
  end
  puts
end
